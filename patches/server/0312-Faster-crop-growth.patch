From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: M0diis <modestas.kazlauskas@ktu.edu>
Date: Thu, 18 Jan 2024 13:47:27 +0200
Subject: [PATCH] Faster crop growth


diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 61d051f42d8c3d1f039b97fdc7a61b54f57ee86a..fb4e11b97bbe8985c50504a02d1f4b46da325cc3 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -74,28 +74,81 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
             int i = this.getAge(state);
 
             if (i < this.getMaxAge()) {
-                float f = CropBlock.getGrowthSpeed(this, world, pos);
-
-                // Spigot start
-                int modifier;
-                if (this == Blocks.BEETROOTS) {
-                    modifier = world.spigotConfig.beetrootModifier;
-                } else if (this == Blocks.CARROTS) {
-                    modifier = world.spigotConfig.carrotModifier;
-                } else if (this == Blocks.POTATOES) {
-                    modifier = world.spigotConfig.potatoModifier;
-                // Paper start
-                } else if (this == Blocks.TORCHFLOWER_CROP) {
-                    modifier = world.spigotConfig.torchFlowerModifier;
-                // Paper end
+                // Purpur start - Blazingly simple farm checks
+                if (true) {
+                    // These checks are similar to getGrowthSpeed, but we have "inlined" them because we want to access stuff like the farm block data later on
+                    // Is the block below us moisturised?
+                    BlockPos farmlandBelowTheCurrentBlock = pos.below();
+                    BlockState farmlandBelowTheCurrentBlockData = world.getBlockState(farmlandBelowTheCurrentBlock);
+                    float f = 1f;
+                    boolean isCurrentFarmlandStateMoist = false;
+                    if (farmlandBelowTheCurrentBlockData.is(Blocks.FARMLAND)) {
+                        if ((Integer) farmlandBelowTheCurrentBlockData.getValue(FarmBlock.MOISTURE) > 0) {
+                            // If we are currently moist, increase the speed!
+                            f = 2f;
+                            isCurrentFarmlandStateMoist = true;
+                        }
+                    }
+                    // If we are skipping the middle aging stages, we need to change the growth speed and the next stage accordingly
+                    if (true) { // skipMiddleAgingStagesForCrops
+                        f = f / getMaxAge();
+                        i = getMaxAge() - 1;
+                    }
+
+                    // Spigot start
+                    int modifier;
+                    if (this == Blocks.BEETROOTS) {
+                        modifier = world.spigotConfig.beetrootModifier;
+                    } else if (this == Blocks.CARROTS) {
+                        modifier = world.spigotConfig.carrotModifier;
+                    } else if (this == Blocks.POTATOES) {
+                        modifier = world.spigotConfig.potatoModifier;
+                        // Paper start
+                    } else if (this == Blocks.TORCHFLOWER_CROP) {
+                        modifier = world.spigotConfig.torchFlowerModifier;
+                        // Paper end
+                    } else {
+                        modifier = world.spigotConfig.wheatModifier;
+                    }
+
+                    if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                        // Spigot end
+                        if (!CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2)) {
+                            return;
+                        }
+
+                        // Now that we know that the crop will grow... is the next stage the crop's max age? If yes, we are going to check if the farm land is moist!
+                        if (i + 1 == getMaxAge() && isCurrentFarmlandStateMoist && !FarmBlock.isNearWater(world, farmlandBelowTheCurrentBlock)) {
+                            // Whoops, farm land ain't moist!
+                            // From FarmBlock, set the moisture to 0
+                            org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, farmlandBelowTheCurrentBlock, (BlockState) farmlandBelowTheCurrentBlockData.setValue(FarmBlock.MOISTURE, 0), 2); // CraftBukkit
+                        }
+                    }
                 } else {
-                    modifier = world.spigotConfig.wheatModifier;
-                }
+                    float f = CropBlock.getGrowthSpeed(this, world, pos);
+
+                    // Spigot start
+                    int modifier;
+                    if (this == Blocks.BEETROOTS) {
+                        modifier = world.spigotConfig.beetrootModifier;
+                    } else if (this == Blocks.CARROTS) {
+                        modifier = world.spigotConfig.carrotModifier;
+                    } else if (this == Blocks.POTATOES) {
+                        modifier = world.spigotConfig.potatoModifier;
+                        // Paper start
+                    } else if (this == Blocks.TORCHFLOWER_CROP) {
+                        modifier = world.spigotConfig.torchFlowerModifier;
+                        // Paper end
+                    } else {
+                        modifier = world.spigotConfig.wheatModifier;
+                    }
 
-                if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
-                    // Spigot end
-                    CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2); // CraftBukkit
+                    if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                        // Spigot end
+                        CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2); // CraftBukkit
+                    }
                 }
+                // Purpur end
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 856099241737c43b8213ccc203ef6bb7b7667b1f..5c87baaa9b415f8a42a1725c4d314228655f8ac2 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -85,6 +85,21 @@ public class FarmBlock extends Block {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = (Integer) state.getValue(FarmBlock.MOISTURE);
+
+        // Purpur start - Blazingly simple farm checks
+        if (true) {
+            if (i == 0) { // We only care about non-moisturised farm blocks
+                if (FarmBlock.isNearWater(world, pos)) {
+                    // Make it MOIST!
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, 7), 2); // CraftBukkit
+                } else if (!FarmBlock.shouldMaintainFarmland(world, pos)) {
+                    FarmBlock.turnToDirt((Entity) null, state, world, pos);
+                }
+            }
+            return;
+        }
+       // Purpur end
+
         if (i > 0 && world.paperConfig().tickRates.wetFarmland != 1 && (world.paperConfig().tickRates.wetFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.wetFarmland != 0)) { return; } // Paper
         if (i == 0 && world.paperConfig().tickRates.dryFarmland != 1 && (world.paperConfig().tickRates.dryFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.dryFarmland != 0)) { return; } // Paper
 
@@ -159,7 +174,7 @@ public class FarmBlock extends Block {
         return world.getBlockState(pos.above()).is(BlockTags.MAINTAINS_FARMLAND);
     }
 
-    private static boolean isNearWater(LevelReader world, BlockPos pos) {
+    public static boolean isNearWater(LevelReader world, BlockPos pos) { // Purpur - make public for the Blazingly simple farm checks
         // Paper start - remove abstract block iteration
         int xOff = pos.getX();
         int yOff = pos.getY();
